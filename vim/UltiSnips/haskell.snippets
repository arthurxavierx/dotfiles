# vim:noexpandtab:fdm=marker:fdl=0:
priority 1

snippet module "Module header" b
module ${1:`!v substitute(substitute(fnamemodify(expand("%:r"), ":~:."), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')`} where

import ${2:Prelude}

${0}
endsnippet

snippet importq "Qualified import" b
import qualified ${1:Module} as ${2:Q}
endsnippet

snippet language "Language extension" b
{-# LANGUAGE ${1:_} #-}
endsnippet

snippet leti "let ... in ..." b
let
	${1}
in
	${0}
endsnippet

snippet where "where ..." b
where
	${0}
endsnippet

snippet lam "Lambda" w
\\${1:_} -> ${0:_}
endsnippet

snippet def "Define an equality with a type signature" b
${1:name} :: ${2:Type}
$1 = ${0:`!p snip.rv = '_' + t[1].split(' ')[0]`}
endsnippet

snippet fun "Define a function with a type signature" b
${1:function} :: ${2:Type}
$1 ${3:args} = ${0:`!p snip.rv = '_' + t[1].split(' ')[0]`}
endsnippet

snippet caseof "case ... of" b
case ${1:_} of
	${2:_} ->
		${0:_}
endsnippet

snippet ifthen "if ... then ... else" b
if ${1:_} then
	${2:_}
else
	${3:_}
endsnippet

snippet describe "HSpec describe" b
describe "${1:_}" do
	${0:_}
endsnippet
