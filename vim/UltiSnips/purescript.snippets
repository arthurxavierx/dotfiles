# vim:noexpandtab:fdm=marker:fdl=0:
priority 1

snippet module "Module header" b
module ${1:`!v substitute(substitute(fnamemodify(expand("%:r"), ":~:."), '[/\\]','.','g'),'^\%(\l*\.\)*','','')`}
	(
	) where

${0}
endsnippet

snippet importq "Qualified import" b
import ${1:Module} as ${2:$1}
endsnippet

snippet instance "Define a typeclass instance" b
instance `!p
snip.rv = t[1][:1].lower() + t[1][1:] + t[2].replace('(', '').replace(')', '').split(' ')[0]
` :: ${1:Class} ${2:Type}
endsnippet

snippet letin "let ... in ..." b
let
	${1}
in
	${0}
endsnippet

snippet where "where ..." b
where
	${0}
endsnippet

snippet lam "Lambda" w
\\${1:_} -> ${0}
endsnippet

snippet tyrec "Define a type synonym for a record" b
type ${1:Type}
	= { ${0}
		}
endsnippet

snippet def "Define an equality with a type signature" b
${1:name} :: ${2:?$1}
$1 = ${0:`!p snip.rv = '?' + t[1].split(' ')[0]`}
endsnippet

snippet fun "Define a function with a type signature" b
${1:function} :: ${2:?$1}
$1 ${3:args} = ${0:`!p snip.rv = '?' + t[1].split(' ')[0]`}
endsnippet

snippet caseof "case ... of"
case ${1:_} of
	${2:_} -> ${0:?x}
endsnippet

snippet ifthen "if ... then ... else"
if ${1:?cond} then
	${2:?true}
else
	${3:?false}
endsnippet

# Forms {{{

snippet dfo "Define a form"
${1:form}
	:: forall props
	 . FormBuilder
			{ readonly :: Boolean | props }
			${2:FormData}
			${3:Result}
$1 = ${0}
endsnippet

snippet dfof "Form field"
${1:field} <-
	F.indent "${2}" Neither
	$ F.focus Lenses._$1
	$ ${0}
endsnippet

snippet dfof* "Required form field"
${1:field} <-
	F.indent "${2}" Required
	$ F.focus Lenses._$1
	$ F.validated ${3:(F.nonEmpty "$2")}
	$ ${0}
endsnippet

# }}}
